text(20000, 70, colnames(tree_taxonomy)[6], col = cols[6], adj = 1)
all = length(unique(dat$` cluster_ID`[dat$taxonomy_ID%in%
pds[[1]]$taxonomy$ncbi_id]))
all
pds
#Calculate total n of clusters within data set
clusters_total = length(unique(dat$` cluster_ID`[dat$taxonomy_ID%in%
pds[[1]]$taxonomy$ncbi_id]))
#Calculate  cluster n per parition
cluster_space_partitions = c()
for(i in 1:length(pds)){
print(i)
#Calculate n clusters within partition
n_clusters = length(unique(dat$` cluster_ID`[dat$taxonomy_ID%in%
pds[[i]]$taxonomy$ncbi_id]))
#Normalize by total number of clusters ('clusters_total')
n_clusters_norm = n_clusters/clusters_total
#Add to vector
cluster_space_partitions = c(cluster_space_partitions,
n_clusters_norm)
print(cluster_space_partitions)
}
#Counter
pb <- txtProgressBar(min = 1,
max = length(pds),
style = 3,
width = 100,
char = ".")
#Loop over and calculate
for(i in 1:length(pds)){
#Update counter
setTxtProgressBar(pb, i)
#Calculate n clusters within partition
n_clusters = length(unique(dat$` cluster_ID`[dat$taxonomy_ID%in%
pds[[i]]$taxonomy$ncbi_id]))
#Normalize by total number of clusters ('clusters_total')
n_clusters_norm = n_clusters/clusters_total
#Add to vector
cluster_space_partitions = c(cluster_space_partitions,
n_clusters_norm)
}
length(pds)
#Counter
pb <- txtProgressBar(min = 1,
max = length(pds),
style = 3,
width = 100,
char = ".")
#Loop over and calculate
for(i in 1:length(pds)){
#Update counter
setTxtProgressBar(pb, i)
#Calculate n clusters within partition
n_clusters = length(unique(dat$` cluster_ID`[dat$taxonomy_ID%in%
pds[[i]]$taxonomy$ncbi_id]))
#Normalize by total number of clusters ('clusters_total')
n_clusters_norm = n_clusters/clusters_total
#Add to vector
cluster_space_partitions = c(cluster_space_partitions,
n_clusters_norm)
}
#Convert to percentage
cluster_space_partitions = cluster_space_partitions*100
#Get colors
cols = colorRampPalette(unlist(
arcadia_magma$color_dict))(length(seq(0, 100, 0.1)))
names(cols) = seq(0, 100, 0.1)
cols = cols[match(round(cluster_space_partitions, 1),
names(cols))]
#Plot
plot(names(pds),
cluster_space_partitions,
xlab = 'Partition size (n proteins)',
ylab = '% of cluster space',
cex.axis = 1.5,
cex.lab = 1.5,
col = cols,
cex = 1.5,
pch = 20,
yaxt = 'n',
ylim = c(0, 100))
length(cluster_space_partitions)
length(names(pds))
#Create empty vector to save results
cluster_space_partitions = c()
#Counter
pb <- txtProgressBar(min = 1,
max = length(pds),
style = 3,
width = 100,
char = ".")
#Loop over and calculate
for(i in 1:length(pds)){
#Update counter
setTxtProgressBar(pb, i)
#Calculate n clusters within partition
n_clusters = length(unique(dat$` cluster_ID`[dat$taxonomy_ID%in%
pds[[i]]$taxonomy$ncbi_id]))
#Normalize by total number of clusters ('clusters_total')
n_clusters_norm = n_clusters/clusters_total
#Add to vector
cluster_space_partitions = c(cluster_space_partitions,
n_clusters_norm)
}
#Convert to percentage
cluster_space_partitions = cluster_space_partitions*100
#Get colors
cols = colorRampPalette(unlist(
arcadia_magma$color_dict))(length(seq(0, 100, 0.1)))
names(cols) = seq(0, 100, 0.1)
cols = cols[match(round(cluster_space_partitions, 1),
names(cols))]
#Plot
plot(names(pds),
cluster_space_partitions,
xlab = 'Partition size (n proteins)',
ylab = '% of cluster space',
cex.axis = 1.5,
cex.lab = 1.5,
col = cols,
cex = 1.5,
pch = 20,
yaxt = 'n',
ylim = c(0, 100))
axis(2,
seq(0, 100, 20),
seq(0, 100, 20),
cex.axis = 1.5,
las = 2)
#Add ncbi id to cluster_stats
cluster_stats$ncbi = dat$taxonomy_ID[match(cluster_stats$cluster_ID,
dat$member_ID)]
#Get n proteins per species
species_n = lapply(split(dat,
dat$taxonomy_ID),
function(x) nrow(x))
#Match order to genome stats matrix
species_n = unlist(species_n[match(genome_stats$ncbi_id,
names(species_n))])
protein_ratio = species_n/
genome_stats$proteins
#Sort
protein_ratio = sort(protein_ratio)
#Add names
names(protein_ratio) = afdb_taxonomy$species[match(names(protein_ratio),
afdb_taxonomy$ncbi_id)]
#Calculate mean pLDDT per cluster
mean_pLDDT = unlist(lapply(split(cluster_stats,
cluster_stats$ncbi),
function(x) mean(x$repPlddt)))
par(mfrow = c(1, 6))
for(i in c(1, 10, 100, 500, 1000, 2000)){
#Filter
s_filter = s[unlist(lapply(s, function(x) nrow(x)))>=i]
#Compare pLDDT and protein ratio
g = Reduce(intersect, list(names(protein_ratio),
names(mean_pLDDT),
names(s_filter)))
#Get kingdoms
kingdoms = afdb_taxonomy$superkingdom[match(g, afdb_taxonomy$ncbi_id)]
kingdoms[kingdoms == 'Bacteria'] = 'Prokaryotes'
kingdoms[kingdoms == 'Archaea'] = 'Prokaryotes'
#Make data matrix
plddt_ratio = data.frame(ratio = log(protein_ratio[match(g,
names(protein_ratio))]),
plddt = mean_pLDDT[match(g, names(mean_pLDDT))],
kingdom = kingdoms)
#Filter out NAs
plddt_ratio = plddt_ratio[complete.cases(plddt_ratio),]
#Calculate pdfs
euk_pdf = kde2d(plddt_ratio$ratio[plddt_ratio$kingdom == 'Eukaryota'],
plddt_ratio$plddt[plddt_ratio$kingdom == 'Eukaryota'],
n = 200,
lims = c(c(-10, 10),
c(30, 100)))
pro_pdf = kde2d(plddt_ratio$ratio[plddt_ratio$kingdom == 'Prokaryotes'],
plddt_ratio$plddt[plddt_ratio$kingdom == 'Prokaryotes'],
n = 200,
lims = c(c(-10, 10),
c(30, 100)))
#Plot as contours
euk_pdf$z = euk_pdf$z/max(euk_pdf$z)
pro_pdf$z = pro_pdf$z/max(pro_pdf$z)
contour(euk_pdf$x,
euk_pdf$y,
euk_pdf$z,
levels = seq(0, 1, 0.025),
#levels = pretty(euk_pdf$z, 20),
col = "#3B9886",
drawlabels = FALSE,
cex.lab = 1.5,
cex.axis = 1.5,
ylab = 'pLDDT',
xlab = 'Protein ratio (log)',
yaxt = 'n')
contour(pro_pdf$x,
pro_pdf$y,
pro_pdf$z,
levels = seq(0, 1, 0.025),
add = TRUE,
#levels = pretty(pro_pdf$z, 20),
col = "#f898AE",
drawlabels = FALSE)
axis(2,
seq(30, 90, 20),
seq(30, 90, 20),
cex.axis = 1.5,
las = 2)
abline(v = 1,
lty = 'dashed',
lwd = 1.5)
title(main = paste('min n proteins =', i, sep = ' '),
font.main = 1,
cex.main = 1.5)
}
#Add ncbi id to cluster_stats
cluster_stats$ncbi = dat$taxonomy_ID[match(cluster_stats$cluster_ID,
dat$member_ID)]
#Get n proteins per species
species_n = lapply(split(dat,
dat$taxonomy_ID),
function(x) nrow(x))
#Match order to genome stats matrix
species_n = unlist(species_n[match(genome_stats$ncbi_id,
names(species_n))])
#Calculate ratio of n proteins in AFDB to protein coding genes for each species
protein_ratio = species_n/
genome_stats$proteins
#Sort
protein_ratio = sort(protein_ratio)
#Add names
names(protein_ratio) = afdb_taxonomy$species[match(names(protein_ratio),
afdb_taxonomy$ncbi_id)]
#Calculate mean pLDDT per cluster
mean_pLDDT = unlist(lapply(split(cluster_stats,
cluster_stats$ncbi),
function(x) mean(x$repPlddt)))
#Calculate n proteins per cluster
s = split(cluster_stats,
cluster_stats$ncbi)
#Plot probability density functions at different protein n cutoffs
par(mfrow = c(1, 6))
for(i in c(1, 10, 100, 500, 1000, 2000)){
#Filter
s_filter = s[unlist(lapply(s, function(x) nrow(x)))>=i]
#Compare pLDDT and protein ratio
g = Reduce(intersect, list(names(protein_ratio),
names(mean_pLDDT),
names(s_filter)))
#Get kingdoms
kingdoms = afdb_taxonomy$superkingdom[match(g, afdb_taxonomy$ncbi_id)]
kingdoms[kingdoms == 'Bacteria'] = 'Prokaryotes'
kingdoms[kingdoms == 'Archaea'] = 'Prokaryotes'
#Make data matrix
plddt_ratio = data.frame(ratio = log(protein_ratio[match(g,
names(protein_ratio))]),
plddt = mean_pLDDT[match(g, names(mean_pLDDT))],
kingdom = kingdoms)
#Filter out NAs
plddt_ratio = plddt_ratio[complete.cases(plddt_ratio),]
#Calculate pdfs
euk_pdf = kde2d(plddt_ratio$ratio[plddt_ratio$kingdom == 'Eukaryota'],
plddt_ratio$plddt[plddt_ratio$kingdom == 'Eukaryota'],
n = 200,
lims = c(c(-10, 10),
c(30, 100)))
pro_pdf = kde2d(plddt_ratio$ratio[plddt_ratio$kingdom == 'Prokaryotes'],
plddt_ratio$plddt[plddt_ratio$kingdom == 'Prokaryotes'],
n = 200,
lims = c(c(-10, 10),
c(30, 100)))
#Plot as contours
euk_pdf$z = euk_pdf$z/max(euk_pdf$z)
pro_pdf$z = pro_pdf$z/max(pro_pdf$z)
contour(euk_pdf$x,
euk_pdf$y,
euk_pdf$z,
levels = seq(0, 1, 0.025),
#levels = pretty(euk_pdf$z, 20),
col = "#3B9886",
drawlabels = FALSE,
cex.lab = 1.5,
cex.axis = 1.5,
ylab = 'pLDDT',
xlab = 'Protein ratio (log)',
yaxt = 'n')
contour(pro_pdf$x,
pro_pdf$y,
pro_pdf$z,
levels = seq(0, 1, 0.025),
add = TRUE,
#levels = pretty(pro_pdf$z, 20),
col = "#f898AE",
drawlabels = FALSE)
axis(2,
seq(30, 90, 20),
seq(30, 90, 20),
cex.axis = 1.5,
las = 2)
abline(v = 1,
lty = 'dashed',
lwd = 1.5)
title(main = paste('min n proteins =', i, sep = ' '),
font.main = 1,
cex.main = 1.5)
}
i
plddt_ratio
#Filter
s_filter = s[unlist(lapply(s, function(x) nrow(x)))>=i]
#Compare pLDDT and protein ratio
g = Reduce(intersect, list(names(protein_ratio),
names(mean_pLDDT),
names(s_filter)))
#Get kingdoms
kingdoms = afdb_taxonomy$superkingdom[match(g, afdb_taxonomy$ncbi_id)]
kingdoms[kingdoms == 'Bacteria'] = 'Prokaryotes'
kingdoms[kingdoms == 'Archaea'] = 'Prokaryotes'
#Make data matrix
plddt_ratio = data.frame(ratio = log(protein_ratio[match(g,
names(protein_ratio))]),
plddt = mean_pLDDT[match(g, names(mean_pLDDT))],
kingdom = kingdoms)
kingdomgs
kingdoms
g
s_filter
names(protein_ratio)
names(mean_pLDDT)
names(s_filter)
#Sort
protein_ratio = sort(protein_ratio)
#Add names
names(protein_ratio) = afdb_taxonomy$ncbi_id[match(names(protein_ratio),
afdb_taxonomy$ncbi_id)]
#Calculate mean pLDDT per cluster
mean_pLDDT = unlist(lapply(split(cluster_stats,
cluster_stats$ncbi),
function(x) mean(x$repPlddt)))
#Filter
s_filter = s[unlist(lapply(s, function(x) nrow(x)))>=i]
#Compare pLDDT and protein ratio
g = Reduce(intersect, list(names(protein_ratio),
names(mean_pLDDT),
names(s_filter)))
g
names(protein_ratio)
#Calculate ratio of n proteins in AFDB to protein coding genes for each species
protein_ratio = species_n/
genome_stats$proteins
#Sort
protein_ratio = sort(protein_ratio)
protein_ratio
#Calculate ratio of n proteins in AFDB to protein coding genes for each species
protein_ratio = species_n/
genome_stats$proteins
#Sort
protein_ratio = sort(protein_ratio)
#Filter
s_filter = s[unlist(lapply(s, function(x) nrow(x)))>=i]
#Compare pLDDT and protein ratio
g = Reduce(intersect, list(names(protein_ratio),
names(mean_pLDDT),
names(s_filter)))
g
#Plot probability density functions at different protein n cutoffs
par(mfrow = c(1, 6))
for(i in c(1, 10, 100, 500, 1000, 2000)){
#Filter
s_filter = s[unlist(lapply(s, function(x) nrow(x)))>=i]
#Compare pLDDT and protein ratio
g = Reduce(intersect, list(names(protein_ratio),
names(mean_pLDDT),
names(s_filter)))
#Get kingdoms
kingdoms = afdb_taxonomy$superkingdom[match(g, afdb_taxonomy$ncbi_id)]
kingdoms[kingdoms == 'Bacteria'] = 'Prokaryotes'
kingdoms[kingdoms == 'Archaea'] = 'Prokaryotes'
#Make data matrix
plddt_ratio = data.frame(ratio = log(protein_ratio[match(g,
names(protein_ratio))]),
plddt = mean_pLDDT[match(g, names(mean_pLDDT))],
kingdom = kingdoms)
#Filter out NAs
plddt_ratio = plddt_ratio[complete.cases(plddt_ratio),]
#Calculate pdfs
euk_pdf = kde2d(plddt_ratio$ratio[plddt_ratio$kingdom == 'Eukaryota'],
plddt_ratio$plddt[plddt_ratio$kingdom == 'Eukaryota'],
n = 200,
lims = c(c(-10, 10),
c(30, 100)))
pro_pdf = kde2d(plddt_ratio$ratio[plddt_ratio$kingdom == 'Prokaryotes'],
plddt_ratio$plddt[plddt_ratio$kingdom == 'Prokaryotes'],
n = 200,
lims = c(c(-10, 10),
c(30, 100)))
#Plot as contours
euk_pdf$z = euk_pdf$z/max(euk_pdf$z)
pro_pdf$z = pro_pdf$z/max(pro_pdf$z)
contour(euk_pdf$x,
euk_pdf$y,
euk_pdf$z,
levels = seq(0, 1, 0.025),
#levels = pretty(euk_pdf$z, 20),
col = "#3B9886",
drawlabels = FALSE,
cex.lab = 1.5,
cex.axis = 1.5,
ylab = 'pLDDT',
xlab = 'Protein ratio (log)',
yaxt = 'n')
contour(pro_pdf$x,
pro_pdf$y,
pro_pdf$z,
levels = seq(0, 1, 0.025),
add = TRUE,
#levels = pretty(pro_pdf$z, 20),
col = "#f898AE",
drawlabels = FALSE)
axis(2,
seq(30, 90, 20),
seq(30, 90, 20),
cex.axis = 1.5,
las = 2)
abline(v = 1,
lty = 'dashed',
lwd = 1.5)
title(main = paste('min n proteins =', i, sep = ' '),
font.main = 1,
cex.main = 1.5)
}
dev.off()
#Plot probability density functions at different protein n cutoffs
par(mfrow = c(1, 6))
for(i in c(1, 10, 100, 500, 1000, 2000)){
#Filter
s_filter = s[unlist(lapply(s, function(x) nrow(x)))>=i]
#Compare pLDDT and protein ratio
g = Reduce(intersect, list(names(protein_ratio),
names(mean_pLDDT),
names(s_filter)))
#Get kingdoms
kingdoms = afdb_taxonomy$superkingdom[match(g, afdb_taxonomy$ncbi_id)]
kingdoms[kingdoms == 'Bacteria'] = 'Prokaryotes'
kingdoms[kingdoms == 'Archaea'] = 'Prokaryotes'
#Make data matrix
plddt_ratio = data.frame(ratio = log(protein_ratio[match(g,
names(protein_ratio))]),
plddt = mean_pLDDT[match(g, names(mean_pLDDT))],
kingdom = kingdoms)
#Filter out NAs
plddt_ratio = plddt_ratio[complete.cases(plddt_ratio),]
#Calculate pdfs
euk_pdf = kde2d(plddt_ratio$ratio[plddt_ratio$kingdom == 'Eukaryota'],
plddt_ratio$plddt[plddt_ratio$kingdom == 'Eukaryota'],
n = 200,
lims = c(c(-10, 10),
c(30, 100)))
pro_pdf = kde2d(plddt_ratio$ratio[plddt_ratio$kingdom == 'Prokaryotes'],
plddt_ratio$plddt[plddt_ratio$kingdom == 'Prokaryotes'],
n = 200,
lims = c(c(-10, 10),
c(30, 100)))
#Plot as contours
euk_pdf$z = euk_pdf$z/max(euk_pdf$z)
pro_pdf$z = pro_pdf$z/max(pro_pdf$z)
contour(euk_pdf$x,
euk_pdf$y,
euk_pdf$z,
levels = seq(0, 1, 0.025),
#levels = pretty(euk_pdf$z, 20),
col = "#3B9886",
drawlabels = FALSE,
cex.lab = 1.5,
cex.axis = 1.5,
ylab = 'pLDDT',
xlab = 'Protein ratio (log)',
yaxt = 'n')
contour(pro_pdf$x,
pro_pdf$y,
pro_pdf$z,
levels = seq(0, 1, 0.025),
add = TRUE,
#levels = pretty(pro_pdf$z, 20),
col = "#f898AE",
drawlabels = FALSE)
axis(2,
seq(30, 90, 20),
seq(30, 90, 20),
cex.axis = 1.5,
las = 2)
abline(v = 1,
lty = 'dashed',
lwd = 1.5)
title(main = paste('min n proteins =', i, sep = ' '),
font.main = 1,
cex.main = 1.5)
}
styler:::style_active_file()
setwd('~/Desktop/')
system('wget https://afdb-cluster.steineggerlab.workers.dev/1-AFDBClusters-entryId_repId_taxId.tsv.gz')
system('wget https://afdb-cluster.steineggerlab.workers.dev/2-repId_isDark_nMem_repLen_avgLen_repPlddt_avgPlddt_LCAtaxId.tsv.gz')
system('wget https://www.rcsb.org/stats/explore/scientific_name_of_source_organism')
prepareDatabase(getAccessions=FALSE)
system('wget https://www.rcsb.org/stats/explore/scientific_name_of_source_organism')
styler:::style_active_file()
setwd('~/Documents/Research/github/2024-protein-universe/')
pdb
nrow(pdb)
?comparative data
?caper::comparative.data
?caper::pgls
